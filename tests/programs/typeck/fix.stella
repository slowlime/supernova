language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;
extend with #lists;

extend with #fixpoint-combinator;

fn check(x : fn(Nat) -> Nat, y : fn(Bool) -> Bool) -> Unit {
  fn fix-x-is-nat() -> Nat {
    //!~ ERROR
    return fix(x)
  }

  fn fix-y-is-not-nat() -> Nat {
    //! ERROR(sema::expr_ty_mismatch)
    return fix(y)
  }

  return unit
}

fn infer(x : fn(Nat) -> Nat) -> Unit {
  //!~ ERROR
  return match fix(x) { _ as Nat => unit }
}

fn fix-not-function(x : Nat) -> Unit {
  fn check() -> Unit {
    //! ERROR(sema::expr_ty_mismatch)
    return fix(x)
  }

  fn infer() -> Unit {
    //! ERROR(sema::fix_not_fn)
    return match fix(x) { _ => unit }
  }

  return unit
}

fn fix-nullary-function(x : fn() -> Nat) -> Unit {
  fn check() -> Nat {
    //! ERROR(sema::expr_ty_mismatch)
    return fix(x)
  }

  fn infer() -> Unit {
    //! ERROR(sema::fix_wrong_fn_param_count)
    return match fix(x) { _ => unit }
  }

  return unit
}

fn fix-multiparameter-function(x : fn(Nat, Bool) -> Nat) -> Nat {
  fn check() -> Nat {
    //! ERROR(sema::expr_ty_mismatch)
    return fix(x)
  }

  fn infer() -> Unit {
    //! ERROR(sema::fix_wrong_fn_param_count)
    return match fix(x) { _ => unit }
  }

  return unit
}

fn fix-param-ret-tys-mismatch(x : fn(Nat) -> Bool) -> Bool {
  //! ERROR(sema::expr_ty_mismatch)
  return fix(x)
}

fn inner-expr-has-expectation() -> [Bool] {
  //!~ ERROR
  return fix(fn(x : [Bool]) { return [] })
}

fn main(x : Nat) -> Nat {
  return x
}
