language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;
extend with #letrec-bindings, #let-patterns, #letrec-many-bindings;

fn check(x : Nat) -> Unit {
  return match x {        //!<~ ERROR
    succ(succ(z)) => unit //!<~ ERROR
  | _ => unit             //!<~ ERROR
  }                       //!<~ ERROR
}

fn infer(x : Nat) -> Unit {
  return letrec //!<~ ERROR
    succ(y) = x //!<~ ERROR
   in unit      //!<~ ERROR
}

fn illegal-pattern-for-ty() -> Unit {
  return match unit {
    //! ERROR(sema::illegal_pattern_for_ty)
    succ(x) => unit
  | _ => unit
  }
}

fn illegal-arg(x : Nat) -> Unit {
  fn check() -> Unit {
    return match x {
      succ(
        unit //!< ERROR(sema::illegal_pattern_for_ty)
      ) => unit
    | _ => unit
    }
  }

  fn infer() -> Unit {
    return letrec
      succ(
        unit //!< ERROR(sema::illegal_pattern_for_ty)
      ) = x
     in unit
  }

  return unit
}

fn wrong-arg-count(x : Nat) -> Unit {
  fn check() -> Unit {
    return match x {
      //! ERROR(sema::wrong_arg_count)
      succ() => unit
    | //! ERROR(sema::wrong_arg_count)
      succ(x, y) => unit
    | _ => unit
    }
  }

  fn infer() -> Unit {
    return letrec
      //! ERROR(sema::wrong_arg_count)
      succ() = x,
      //! ERROR(sema::wrong_arg_count)
      succ(a, b) = x
     in unit
  }

  return unit
}

fn main(x : Nat) -> Nat {
  return x
}
