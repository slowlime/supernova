language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;
extend with #letrec-bindings, #let-patterns, #letrec-many-bindings;

extend with #lists;

fn check(x : [Nat]) -> Unit {
  return match x { //!<~ ERROR
    [] => unit     //!<~ ERROR
  | [x] => unit    //!<~ ERROR
  | [x, y] => unit //!<~ ERROR
  | _ => unit      //!<~ ERROR
  }                //!<~ ERROR
}

fn infer(x : [Nat]) -> Unit {
  return letrec
    //! ERROR(sema::ambiguous_list_ty)
    [] = x,
    //!~ ERROR
    [a as Nat] = x,
    //!~ ERROR
    [b as Nat, c] = x
   in unit
}

fn illegal-pattern-for-ty() -> Unit {
  return match 0 {
    //! ERROR(sema::illegal_pat_for_ty)
    [] => unit
  | //! ERROR(sema::illegal_pat_for_ty)
    [x, y] => unit
  | _ => unit
  }
}

fn illegal-elem-tys(x : [Nat]) -> Unit {
  fn check() -> Unit {
    return match x {
      [
        unit, //!< ERROR(sema::illegal_pat_for_ty)
        _
      ] => unit
    | [
        _,
        unit //!< ERROR(sema::illegal_pat_for_ty)
      ] => unit
    | _ => unit
    }
  }

  fn infer() -> Unit {
    return letrec
      [
        x as Nat,
        //! ERROR(sema::illegal_pat_for_ty)
        false
      ] = x
     in unit
  }

  return unit
}

fn main(x : Nat) -> Nat {
  return x
}
