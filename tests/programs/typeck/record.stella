language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;

extend with #records;

fn check() -> Unit {
  fn record-a-b() -> {a : Nat, b : Bool} {
    //!~ ERROR
    return {a = 0, b = false}
  }

  return unit
}

fn infer() -> Unit {
  //!~ ERROR
  return match {a = 0, b = false} { _ as {a : Nat, b : Bool} => unit }
}

fn allow-permutations-in-record-expr() -> {a : Nat, b : Nat} {
  //!~ ERROR
  return {b = 0, a = 0}
}

fn distinct-permutations-are-distinct-types(x : {a : Nat, b : Nat}) -> {b : Nat, a : Nat} {
  //! ERROR(sema::expr_ty_mismatch)
  return x
}

fn unexpected-record() -> Unit {
  //! ERROR(sema::unexpected_record)
  return {a = false, b = 0}
}

fn missing-record-field() -> Unit {
  fn empty() -> {a : Nat, b : Bool} {
    //! ERROR(sema::missing_record_field)
    return {}
  }

  fn non-empty() -> {a : Nat, b : Bool} {
    //! ERROR(sema::missing_record_field)
    return {a = 0}
  }

  return unit
}

fn no-such-record-field() -> Unit {
  fn empty() -> {} {
    //! ERROR(sema::no_such_record_field)
    return {a = 0}
  }

  fn non-empty() -> {a : Nat, b : Bool} {
    //! ERROR(sema::no_such_record_field)
    return {a = 0, b = false, c = unit}
  }

  return unit
}

fn illegal-record-field-tys() -> Unit {
  fn expect(x : {a : Nat, b : Bool, c : Unit}) -> Unit {
    return unit
  }

  fn wrong-a() -> Unit {
    //! ERROR(sema::expr_ty_mismatch)
    return expect({a = unit, b = false, c = unit})
  }

  fn wrong-b() -> Unit {
    //! ERROR(sema::expr_ty_mismatch)
    return expect({a = 0, b = unit, c = unit})
  }

  fn wrong-c() -> Unit {
    //! ERROR(sema::expr_ty_mismatch)
    return expect({a = 0, b = false, c = 0})
  }

  return unit
}

fn main(x : Nat) -> Nat {
  return x
}
