language core;

extend with #nested-function-declarations;
extend with #pattern-ascriptions;
extend with #structural-patterns;
extend with #tuples;
extend with #unit-type;
extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #let-bindings;
extend with #letrec-bindings;
extend with #let-many-bindings;
extend with #letrec-many-bindings;
extend with #let-patterns;

fn duplicate-outer-def() -> Unit {
  return unit
}

//! ERROR(sema::duplicate_var_def)
fn duplicate-outer-def(x : Unit) -> Unit {
  return x
}

//! ERROR(sema::duplicate_var_def)
fn duplicate-param(x : Unit, x : Unit) -> Unit {
  return unit
}

fn duplicate-letrec-binding() -> Unit {
  return letrec
    x as Bool = false,
    y as Bool = true,
    //! ERROR(sema::duplicate_var_def)
    x as Bool = true
   in unit
}

fn duplicate-nested-decl() -> Unit {
  fn foo() -> Unit {
    return unit
  }

  //! ERROR(sema::duplicate_var_def)
  fn foo() -> Unit {
    return unit
  }

  return unit
}

fn duplicate-pattern-bindings(x : {{Bool, Bool}, {Bool}}) -> Unit {
  return match x {
    //! ERROR(sema::duplicate_var_def)
    {{x, y}, {x}} => unit
  }
}

fn duplicate-binding-in-let-pattern() -> Unit {
  return let
    //! ERROR(sema::duplicate_var_def)
    {{x, y}, {y, z}} = {{false, true}, {false, true}}
   in unit
}

fn main(x : Unit) -> Unit {
  return x
}
