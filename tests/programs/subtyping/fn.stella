language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #type-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;
extend with #structural-subtyping;
extend with #top-type;
extend with #bottom-type;
extend with #panic;

fn expect-top() -> Unit {
  fn can-infer() -> Top {
    //!~ ERROR
    return fn(x : Nat) { return x }
  }

  fn cannot-infer() -> Top {
    //! ERROR(sema::ambiguous_panic_expr_ty)
    return fn(x : Nat) { return panic! }
  }

  return unit
}

fn expect-bot() -> Bot {
  //! ERROR(sema::unexpected_fn)
  return fn(x : Nat) { return x }
}

fn covariant-in-ret() -> fn(Nat) -> Top {
  //!~ ERROR
  return fn(x : Nat) { return x as Nat }
}

fn contravariant-in-params() -> fn(Bot) -> Nat {
  //!~ ERROR
  return fn(x : Nat) { return x }
}

fn not-contravariant-in-ret() -> fn(Nat) -> Bot {
  //! ERROR(sema::expr_ty_mismatch)
  return fn(x : Nat) { return x }
}

fn not-covariant-in-params() -> fn(Top) -> Nat {
  //! ERROR(sema::param_ty_mismatch)
  return fn(x : Nat) { return x }
}

fn double-contravariance(x : fn(fn(Bot) -> Top) -> Top) -> fn(fn(Top) -> Top) -> Top {
  //!~ ERROR
  return x
}

fn main(x : Nat) -> Nat {
  return x
}
