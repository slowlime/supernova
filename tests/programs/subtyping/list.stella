language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;
extend with #structural-subtyping;
extend with #top-type;
extend with #bottom-type;

extend with #lists;

fn expect-top() -> Unit {
  fn can-infer() -> Top {
    //!~ ERROR
    return [false]
  }

  fn cannot-infer() -> Top {
    //! ERROR(sema::ambiguous_list_ty)
    return []
  }

  return unit
}

fn expect-bot() -> Bot {
  //! ERROR(sema::unexpected_list)
  return [false]
}

fn list-of-bot(x : Bot) -> Unit {
  fn check() -> Unit {
    fn is-list-of-bot() -> [Bot] {
      //!~ ERROR
      return [x]
    }

    fn is-not-bot() -> Bot {
      //! ERROR(sema::unexpected_list)
      return [x]
    }

    return unit
  }

  fn infer() -> Unit {
    //!~ ERROR
    return match [x] {
      //!~ ERROR
      _ as [Bot] => unit

    | // ERROR(sema::illegal_pat_for_ty)
      _ as Bot => unit
    }
  }

  return unit
}

fn covariance() -> [Top] {
  //!~ ERROR
  return [0]
}

fn no-ty-join(x : fn(Top) -> Bot, y : fn(Bot) -> Top) -> Unit {
  //! ERROR(sema::expr_ty_mismatch)
  return match [x, y] { _ => unit }
}

fn main(x : Nat) -> Nat {
  return x
}
