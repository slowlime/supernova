language core;

extend with #nullary-functions;
extend with #multiparameter-functions;
extend with #structural-patterns;
extend with #pattern-ascriptions;
extend with #nested-function-declarations;
extend with #unit-type;
extend with #structural-subtyping;
extend with #top-type;
extend with #bottom-type;

extend with #lists;

fn expect-top() -> Unit {
  fn can-infer() -> Top {
    //!~ ERROR
    return List::tail([0])
  }

  fn cannot-infer() -> Top {
    //! ERROR(sema::ambiguous_list_ty)
    return List::tail([])
  }

  return unit
}

fn expect-bot() -> Bot {
  //! ERROR(sema::expr_ty_mismatch)
  return List::tail([0])
}

fn arg(t : Top, b : Bot) -> Unit {
  fn check() -> Unit {
    fn expecting-top() -> Top {
      //! ERROR(sema::expr_ty_not_list)
      return List::tail(b)
    }

    fn expecting-list() -> [Nat] {
      //!~ ERROR
      return List::tail(b)
    }

    return unit
  }

  fn infer() -> Unit {
    //! ERROR(sema::expr_ty_not_list)
    return List::tail(b)
  }

  return unit
}

fn main(x : Nat) -> Nat {
  return x
}
